{{- if .Values.linux.enabled}}
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: {{ .Values.linux.dsName }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.linux.dsName }}
    {{- include "azurefile.labels" . | nindent 4 }}
{{- with .Values.linux.labels }}
{{ . | toYaml | indent 4 }}
{{- end }}
{{- with .Values.linux.annotations }}
  annotations:
{{ . | toYaml | indent 4 }}
{{- end }}
spec:
  updateStrategy:
    rollingUpdate:
      maxUnavailable: {{ .Values.node.maxUnavailable }}
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Values.linux.dsName }}
      {{- include "azurefile.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ .Values.linux.dsName }}
        {{- include "azurefile.labels" . | nindent 8 }}
        {{- if .Values.workloadIdentity.clientID }}
        azure.workload.identity/use: "true"
        {{- end }}
{{- with .Values.linux.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.linux.podAnnotations }}
      annotations:
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      hostNetwork: true
      dnsPolicy: {{ .Values.linux.dnsPolicy }}
      serviceAccountName: {{ .Values.serviceAccount.node }}
      nodeSelector:
        kubernetes.io/os: linux
{{- with .Values.linux.nodeSelector }}
{{ toYaml . | indent 8 }}
{{- end }}
      affinity:
{{- with .Values.linux.affinity }}
{{ toYaml . | indent 8 }}
{{- end }}
        nodeAffinity:
{{ toYaml .Values.linux.nodeAffinity | indent 10 }}
      priorityClassName: system-node-critical
      securityContext:
        seccompProfile:
          type: RuntimeDefault
{{- with .Values.linux.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      containers:
        - name: liveness-probe
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
{{- if hasPrefix "/" .Values.image.livenessProbe.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.livenessProbe.repository }}:{{ .Values.image.livenessProbe.tag }}"
{{- else }}
          image: "{{ .Values.image.livenessProbe.repository }}:{{ .Values.image.livenessProbe.tag }}"
{{- end }}
          args:
            - --csi-address=/csi/csi.sock
            - --probe-timeout=3s
            - --http-endpoint=localhost:{{ .Values.node.livenessProbe.healthPort }}
            - --v=2
          imagePullPolicy: {{ .Values.image.livenessProbe.pullPolicy }}
          resources: {{- toYaml .Values.linux.resources.livenessProbe | nindent 12 }}
          securityContext:
            capabilities:
              drop:
              - ALL
        - name: node-driver-registrar
{{- if hasPrefix "/" .Values.image.nodeDriverRegistrar.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.nodeDriverRegistrar.repository }}:{{ .Values.image.nodeDriverRegistrar.tag }}"
{{- else }}
          image: "{{ .Values.image.nodeDriverRegistrar.repository }}:{{ .Values.image.nodeDriverRegistrar.tag }}"
{{- end }}
          args:
            - --csi-address=$(ADDRESS)
            - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
            - --v=2
{{- if .Values.linux.enableRegistrationProbe }}
          livenessProbe:
            exec:
              command:
                - /csi-node-driver-registrar
                - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
                - --mode=kubelet-registration-probe
            initialDelaySeconds: 30
            timeoutSeconds: 15
{{- end }}
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: {{ .Values.linux.kubelet }}/plugins/{{ .Values.driver.name }}/csi.sock
          imagePullPolicy: {{ .Values.image.nodeDriverRegistrar.pullPolicy }}
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
          resources: {{- toYaml .Values.linux.resources.nodeDriverRegistrar | nindent 12 }}
          securityContext:
            capabilities:
              drop:
              - ALL
        - name: azurefile
{{- if hasPrefix "/" .Values.image.azurefile.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.azurefile.repository }}:{{ .Values.image.azurefile.tag }}"
{{- else }}
          image: "{{ .Values.image.azurefile.repository }}:{{ .Values.image.azurefile.tag }}"
{{- end }}
          args:
            - "--v={{ .Values.node.logLevel }}"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--nodeid=$(KUBE_NODE_NAME)"
            - "--kubeconfig={{ .Values.linux.kubeconfig }}"
            - "--drivername={{ .Values.driver.name }}"
            - "--cloud-config-secret-name={{ .Values.node.cloudConfigSecretName }}"
            - "--cloud-config-secret-namespace={{ .Values.node.cloudConfigSecretNamespace }}"
            - "--custom-user-agent={{ .Values.driver.customUserAgent }}"
            - "--user-agent-suffix={{ .Values.driver.userAgentSuffix }}"
            - "--allow-empty-cloud-config={{ .Values.node.allowEmptyCloudConfig }}"
            - "--enable-volume-mount-group={{ .Values.feature.enableVolumeMountGroup }}"
            - "--enable-get-volume-stats={{ .Values.feature.enableGetVolumeStats }}"
            - "--mount-permissions={{ .Values.linux.mountPermissions }}"
            - "--allow-inline-volume-key-access-with-identity={{ .Values.node.allowInlineVolumeKeyAccessWithIdentity }}"
            - "--metrics-address=0.0.0.0:{{ .Values.node.metricsPort }}"
          livenessProbe:
            failureThreshold: 5
            httpGet:
              host: localhost
              path: /healthz
              port: {{ .Values.controller.livenessProbe.healthPort }}
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 30
          env:
            - name: AZURE_CREDENTIAL_FILE
              valueFrom:
                configMapKeyRef:
                  name: azure-cred-file
                  key: path
                  optional: true
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            {{- if ne .Values.driver.httpsProxy "" }}
            - name: HTTPS_PROXY
              value: {{ .Values.driver.httpsProxy }}
            {{- end }}
            {{- if ne .Values.driver.httpProxy "" }}
            - name: HTTP_PROXY
              value: {{ .Values.driver.httpProxy }}
            {{- end }}
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: AZURE_GO_SDK_LOG_LEVEL
              value: {{ .Values.driver.azureGoSDKLogLevel }}
          imagePullPolicy: {{ .Values.image.azurefile.pullPolicy }}
          securityContext:
            privileged: true
            capabilities:
              drop:
              - ALL
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
            - mountPath: {{ .Values.linux.kubelet }}/
              mountPropagation: Bidirectional
              name: mountpoint-dir
            - mountPath: /etc/kubernetes/
              name: azure-cred
            - mountPath: /dev
              name: device-dir
            {{- if eq .Values.linux.distro "fedora" }}
            - name: ssl
              mountPath: /etc/ssl/certs
              readOnly: true
            - name: ssl-pki
              mountPath: /etc/pki/ca-trust/extracted
              readOnly: true
            {{- end }}
          resources: {{- toYaml .Values.linux.resources.azurefile | nindent 12 }}
      volumes:
        - hostPath:
            path: {{ .Values.linux.kubelet }}/plugins/{{ .Values.driver.name }}
            type: DirectoryOrCreate
          name: socket-dir
        - hostPath:
            path: {{ .Values.linux.kubelet }}/
            type: DirectoryOrCreate
          name: mountpoint-dir
        - hostPath:
            path: {{ .Values.linux.kubelet }}/plugins_registry/
            type: DirectoryOrCreate
          name: registration-dir
        - hostPath:
            path: /etc/kubernetes/
            type: DirectoryOrCreate
          name: azure-cred
        - hostPath:
            path: /dev
            type: Directory
          name: device-dir
        {{- if eq .Values.linux.distro "fedora" }}
        - name: ssl
          hostPath:
            path: /etc/ssl/certs
        - name: ssl-pki
          hostPath:
            path: /etc/pki/ca-trust/extracted
        {{- end }}
{{- end -}}
